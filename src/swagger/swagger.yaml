openapi: 3.0.0
info:
  title: REST API for Users and Posts Database
  version: 1.0
paths:
  /auth/signin:
    get:
      summary: Login to account
      tags:
        - auth
      parameters:
        - in: query
          name: userEmail
          schema:
            type: string
            default: ''
          required: true
          description: User email
        - in: query
          name: userPassword
          schema:
            type: string
            default: ''
          required: true
          description: User password
      responses:
        '200':
          description: Authorization was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '400':
          description: Bad request
        '404':
          description: User not found
        '422':
          description: Unprocessable entity
        '500':
          description: Internal server error
  /auth/signup:
    post:
      summary: Register a user
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IUserCreate'
            examples:
              Example Maximum Possible Request Body Without Null:
                value:
                  name: 'bogdan_10'
                  role: 'user'
                  email: 'voyagerbvb@gmail.com'
                  password: 'hjgjHDJJh134!?'
                  contacts:
                    - type: 'telegram'
                      value: '@zira839'
                    - type: 'phone'
                      value: '+7 982 408 31 75'
              Example Maximum Possible Request Body With Null:
                value:
                  name: 'bogdan_10'
                  role: 'user'
                  email: 'voyagerbvb@gmail.com'
                  password: 'hjgjHDJJh134!?'
                  contacts: null
              Example Minimum Possible Request Body:
                value:
                  name: 'bogdan_10'
                  role: 'admin'
                  email: 'voyagerbvb@gmail.com'
                  password: 'hjgjHDJJh134!?'
      responses:
        '200':
          description: Email successfully sent to the user's email
        '400':
          description: Bad request
        '422':
          description: Unprocessable entity
        '500':
          description: Internal server error
  /auth/logout:
    get:
      summary: Logout of account
      tags:
        - auth
      security:
        - CookieAuth: []
      responses:
        '200':
          description: Logout was successfully
        '401':
          description: Unauthorized
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /api/users:
    get:
      summary: Get all users
      tags:
        - users
      parameters:
        - in: query
          name: search
          schema:
            type: string
            default: ''
          required: false
          description: Search string that matches user names or emails
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '401':
          description: Not authorized
        '404':
          description: Users not found
        '422':
          description: Unprocessable entity
        '500':
          description: Internal server error
  /api/users/{id}:
    get:
      summary: Get a user by id
      tags:
        - users
      security:
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: |
            User ID. Example: `223d526d-5064-455e-9daf-6e7e3ad3e77d`
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '401':
          description: Not authorized
        '404':
          description: User not found
        '422':
          description: Unprocessable entity
        '500':
          description: Internal server error
    put:
      summary: Completely change a user by id
      tags:
        - users
      security:
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: |
            User ID. Example: `223d526d-5064-455e-9daf-6e7e3ad3e77d`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IUserUpdate'
            examples:
              Example The Only One Possible Request Body:
                value:
                  name: 'bogdan_super_10'
                  role: 'admin'
                  email: 'bogdan.bvb@ya.ru'
                  password: 'bhgj443jdiHgd!??'
                  rating: 20
      responses:
        '200':
          description: User successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '401':
          description: Not authorized
        '404':
          description: User not found
        '422':
          description: Unprocessable entity
        '500':
          description: Internal server error
    patch:
      summary: Partially change a user by id
      tags:
        - users
      security:
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: |
            User ID. Example: `223d526d-5064-455e-9daf-6e7e3ad3e77d`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IUserUpdate'
            examples:
              Example The Only One Possible Request Body:
                value:
                  name: 'bogdan_10'
                  role: 'user'
                  email: 'voyagerbvb@gmail.com'
                  password: 'jhggjHJDgg78594?'
                  rating: 10
      responses:
        '200':
          description: User successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '401':
          description: Not authorized
        '404':
          description: User not found
        '422':
          description: Unprocessable entity
        '500':
          description: Internal server error
    delete:
      summary: Delete a user by id
      tags:
        - users
      security:
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: |
            User ID. Example: `223d526d-5064-455e-9daf-6e7e3ad3e77d`
      responses:
        '200':
          description: User successfully deleted
        '400':
          description: Bad request
        '401':
          description: Not authorized
        '404':
          description: User not found
        '422':
          description: Unprocessable entity
        '500':
          description: Internal server error
  /api/posts:
    get:
      summary: Get all posts
      tags:
        - posts
      security:
        - CookieAuth: []
      parameters:
        - in: query
          name: search
          schema:
            type: string
            default: ''
          required: false
          description: Search string that matches post titles or text
      responses:
        '200':
          description: List of all posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad request
        '401':
          description: Not authorized
        '404':
          description: Posts not found
        '422':
          description: Unprocessable entity
        '500':
          description: Internal server error
    post:
      summary: Create a new post
      tags:
        - posts
      security:
        - CookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPostCreate'
            examples:
              Example Maximum Possible Request Body Without Null:
                value:
                  title: 'Властелин колец - книги против фильмов'
                  access: 'public'
                  content: 'Я прочитал все книги, а также посмотрел все фильмы про Властелин Колец...'
                  tags:
                    - 'фильмы'
                    - 'книги'
                    - 'Властелин Колец'
                  authorId: '223d526d-5064-455e-9daf-6e7e3ad3e77d'
              Example Maximum Possible Request Body With Null:
                value:
                  title: 'Властелин колец - книги против фильмов'
                  access: 'public'
                  content: 'Я прочитал все книги, а также посмотрел все фильмы про Властелин Колец...'
                  tags: null
                  authorId: '223d526d-5064-455e-9daf-6e7e3ad3e77d'
              Example Minimum Possible Request Body:
                value:
                  title: 'Властелин колец - книги против фильмов'
                  access: 'private'
                  content: 'Я прочитал все книги, а также посмотрел все фильмы про Властелин Колец...'
                  authorId: '223d526d-5064-455e-9daf-6e7e3ad3e77d'
      responses:
        '201':
          description: Post successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad request
        '401':
          description: Not authorized
        '422':
          description: Unprocessable entity
        '500':
          description: Internal server error
  /api/posts/{id}:
    get:
      summary: Get a post by id
      tags:
        - posts
      security:
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: |
            Post ID. Example: `685e80f3-63b0-4b71-b66e-b526f6a2491e`
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad request
        '401':
          description: Not authorized
        '404':
          description: User not found
        '422':
          description: Unprocessable entity
        '500':
          description: Internal server error
    put:
      summary: Completely change a post by id
      tags:
        - posts
      security:
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: |
            Post ID. Example: `685e80f3-63b0-4b71-b66e-b526f6a2491e`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPostUpdate'
            examples:
              Example The Only One Possible Request Body:
                value:
                  title: 'Властелин колец - книги Толкина против фильмов Джексона'
                  access: 'private'
                  content: 'Как-то в детстве я посмотрел фильм...'
                  rating: 33
                  tags:
                    - 'фильмы'
                    - 'книги'
                    - 'Властелин Колец'
                    - 'отдых'
      responses:
        '200':
          description: Post successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad request
        '401':
          description: Not authorized
        '404':
          description: Post not found
        '422':
          description: Unprocessable entity
        '500':
          description: Internal server error
    patch:
      summary: Partially change a post by id
      tags:
        - posts
      security:
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: |
            Post ID. Example: `685e80f3-63b0-4b71-b66e-b526f6a2491e`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPostUpdate'
            examples:
              Example The Only One Possible Request Body:
                value:
                  title: 'Властелин колец - книги против фильмов'
                  access: 'public'
                  content: 'Как-то в детстве я посмотрел фильм...'
                  rating: 33
                  tags:
                    - 'фильмы'
                    - 'книги'
                    - 'Властелин Колец'
      responses:
        '200':
          description: Post successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad request
        '401':
          description: Not authorized
        '404':
          description: Post not found
        '422':
          description: Unprocessable entity
        '500':
          description: Internal server error
    delete:
      summary: Delete a post by id
      tags:
        - posts
      security:
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: |
            Post ID. Example: `685e80f3-63b0-4b71-b66e-b526f6a2491e`
      responses:
        '200':
          description: Post successfully deleted
        '400':
          description: Bad request
        '401':
          description: Not authorized
        '404':
          description: Post not found
        '422':
          description: Unprocessable entity
        '500':
          description: Internal server error
components:
  securitySchemes:
    CookieAuth:
      cookie:
        name: sessionID
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        role:
          type: string
          enum:
            - admin
            - user
        email:
          type: string
        password:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        rating:
          type: integer
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/UserContact'
        subscribers:
          type: array
          items:
            $ref: '#/components/schemas/Subscription'
      examples:
        example1:
          summary: Пример пользователя
            value:
              id: '550e8400-e29b-41d4-a716-446655440000'
              name: 'awesom-e4000'
              role: 'user'
              email: 'awesom-e4000@mail.ru'
              password: 'bjgjnfHDJH647??!!'
              createdAt: '2024-01-01T00:00:00Z'
              updatedAt: '2024-01-01T00:00:00Z'
              rating: 12
              posts:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
              contacts:
                type: array
                items:
                  $ref: '#/components/schemas/UserContact'
              subscribers:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
    IUserCreate:
      type: object
      properties:
        name:
          type: string
        role:
          type: string
          enum:
            - admin
            - user
        email:
          type: string
        password:
          type: string
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/IUserContact'
    IUserUpdate:
      type: object
      properties:
        name:
          type: string
        role:
          type: string
          enum:
            - admin
            - user
        email:
          type: string
        password:
          type: string
        rating:
          type: integer
    UserContact:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
        value:
          type: string
        userId:
          type: string
          format: uuid
        user:
          $ref: '#/components/schemas/User'
      examples:
        example1:
          summary: Пример модели контактов
            value:
              id: '17f2bcd9-8904-48cc-8233-88d64edef2e8'
              type: 'phone'
              value: '+7 982 408 31 75'
              userId: '550e8400-e29b-41d4-a716-446655440000'
              user:
                $ref: '#/components/schemas/User'
    IUserContact:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
    Post:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        access:
          type: string
          enum:
            - public
            - private
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        content:
          type: string
        rating:
          type: integer
        tags:
          type: array
          items:
            type: string
        authorId:
          type: string
          format: uuid
        author:
          $ref: '#/components/schemas/User'
      examples:
        example1:
          summary: Пример поста пользователя
            value:
              id: '550e8400-e29b-41d4-a716-446655440000'
              title: 'Футбол сейчас и футбол век назад'
              access: 'public'
              createdAt: '2024-02-01T00:00:00Z'
              updatedAt: '2024-02-02T00:00:00Z'
              content: 'Меня всегда интересовало, каким был раньше футбол...'
              rating: 100
              tags:
                - 'футбол'
              authorId: '550e8400-e29b-41d4-a716-446655440000'
              author:
                $ref: '#/components/schemas/User'
    IPostCreate:
      type: object
      properties:
        title:
          type: string
        access:
          type: string
          enum:
            - public
            - private
        content:
          type: string
        tags:
          type: array
          items:
            type: string
        authorId:
          type: string
          format: uuid
    IPostUpdate:
      type: object
      properties:
        title:
          type: string
        access:
          type: string
          enum:
            - public
            - private
        content:
          type: string
        rating:
          type: integer
        tags:
          type: array
          items:
            type: string
    Subscription:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
        period:
          type: string
          format: date-time
        userId:
          type: string
          format: uuid
        subscriberId:
          type: string
          format: uuid
      examples:
        example1:
          summary: Пример модели подписки
            value:
              id: '338f82b6-7a3b-443e-98a6-dcf2084ebcd3'
              type: 'guard+'
              period: '2025-01-01T00:00:00Z'
              userId: '550e8400-e29b-41d4-a716-446655440000'
              subscriberId: '2a3935f9-ca00-4c81-8306-08754c1208f9'
